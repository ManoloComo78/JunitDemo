## Merak (The Head Office proprietary Framework) configuration
# The properties below are used exclusively by the "Merak"

server.port={{ .Values.systemProperties.server.port }}

# Mutual TLS
merak.application.name=junit-demo
server.ssl.enabled={{ .Values.systemProperties.server.ssl.enabled }}
server.ssl.client-auth={{ .Values.systemProperties.server.ssl.clientAuth }}
server.ssl.enabled-protocols={{ .Values.systemProperties.server.ssl.enabledProtocols }}
server.ssl.key-store=file:{{ .Values.systemProperties.server.ssl.keyStore }}
server.ssl.key-alias={{ .Values.systemProperties.server.ssl.keyAlias }}
server.ssl.key-store-type={{ .Values.systemProperties.server.ssl.keyStoreType }}

server.ssl.trust-store=file:{{ .Values.systemProperties.server.ssl.trustStore }}
server.ssl.trust-store-type={{ .Values.systemProperties.server.ssl.trustStoreType }}

# Service Discovery
servicediscovery.enabled={{ .Values.systemProperties.servicediscovery.enabled }}
servicediscovery.registration.enabled={{ .Values.systemProperties.servicediscovery.registration.enabled }}
servicediscovery.seed-nodes={{ .Values.systemProperties.servicediscovery.seedNodes }}

#A filter that auto-forwards X-ING headers
merak.filter.headerforwarder.enabled=true

# Delegation table (DTAB)
dtab.discovery={{ .Values.systemProperties.dtab.discovery }}

#JPA
spring.datasource.url={{ .Values.systemProperties.db.dataSourceUrl }}
spring.datasource.driver-class-name=oracle.jdbc.OracleDriver
spring.datasource.username={{ .Values.systemProperties.db.username }}
spring.jpa.database-platform=org.hibernate.dialect.SQLServerDialect

# Manifest
service.manifest.trust-store.location=file:{{ .Values.systemProperties.service.manifest.trustStore.location }}
service.manifest.signed={{ .Values.systemProperties.service.manifest.signed }}
service.instance.datacenter={{ .Values.systemProperties.service.instance.datacenter }}
service.instance.host={{ .Values.systemProperties.service.instance.host }}
service.name={{ .Values.systemProperties.service.name }}

# Routing HTTP Client configuration
http-client.peer-token.enabled={{ .Values.systemProperties.httpClient.peerToken.enabled }}
http-client.peer-token.jwt=file:{{ .Values.systemProperties.httpClient.peerToken.jwt }}

# Access Token
merak.filter.access-token-filter.enabled={{ .Values.systemProperties.merak.filter.accessTokenFilter.enabled }}
api-trust-tokens.access-tokens.keystore.location={{ .Values.systemProperties.apiTrustTokens.accessTokens.keystore.location }}

# Peer Token
merak.filter.peer-token-filter.enabled={{ .Values.systemProperties.merak.filter.peerTokenFilter.enabled }}
merak.filter.peer-token-filter.order = 400
merak.filter.peer-token-filter.allowed-peers = {{ .Values.systemProperties.merak.filter.peerTokenFilter.allowedPeers }}
api-trust-tokens.peer-tokens.keystore.location={{ .Values.systemProperties.apiTrustTokens.peerTokens.keystore.location }}

# Centralized logging using Kafka instances
merak.logging.kafka.enabled={{ .Values.systemProperties.merak.logging.kafka.enabled }}

# TracING
merak.tracing.reporting.kafka.tls-enabled={{ .Values.systemProperties.merak.tracing.reporting.kafka.tls.enabled }}
merak.tracing.reporting.kafka.enabled={{ .Values.systemProperties.merak.tracing.reporting.kafka.enabled }}
merak.tracing.reporting.kafka.connection-string={{ .Values.systemProperties.merak.tracing.reporting.kafka.connectionString }}

# Metrics to Prometheus
metrics.prometheus.server.enabled={{ .Values.systemProperties.metrics.prometheus.server.enabled }}

# Analytics
analytics.enabled={{ .Values.systemProperties.analytics.enabled }}

## End Merak configuration


## Logging properties

## File logging properties
# Output log directory
logging.out.dir={{ .Values.systemProperties.logging.out.dir }}
http-debug.logging.enabled=true

## Kafka logging properties
merak.logging.kafka.tech.topic={{ .Values.systemProperties.merak.logging.kafka.tech.topic }}
merak.logging.kafka.audit.topic={{ .Values.systemProperties.merak.logging.kafka.audit.topic }}

## common logging properties
# Possible values of Audit logging verbosity: BASE, LVL1
# BASE = Trace Log
# LVL1 = BASE + Request and Response body
logging.audit.verbosity={{ .Values.systemProperties.logging.audit.verbosity }}


#Object way related properties
ow.normalizer.svc.sslKeystore= {{ .Values.systemProperties.server.ssl.trustStore }}
ow.normalizer.svc.sslKeyStoreType= {{ .Values.systemProperties.server.ssl.trustStoreType }}
ow.normalizer.svc.tlsProtocol= {{ .Values.systemProperties.ow.normalizer.svc.tlsProtocol }}
ow.normalizer.svc.loginEndpoint= {{ .Values.systemProperties.ow.normalizer.svc.loginEndpoint }}
ow.normalizer.svc.loginTimeout= {{ .Values.systemProperties.ow.normalizer.svc.loginTimeout }}

ow.login.channel= {{ .Values.systemProperties.ow.login.channel }}
ow.login.username= {{ .Values.systemProperties.ow.login.username }}

################## APP LOGGING ###############################
logging.level.com.ing=INFO
logging.level.org.springframework=INFO
logging.level.org.springframework.web=ERROR
logging.level.com.mkyong=INFO
logging.level.org.hibernate.SQL=INFO
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=INFO
logging.level.org.springframework.transaction=INFO
logging.level.org.springframework.kafka.listener=INFO

service.instance.operational-mode.initial-mode={{ .Values.systemProperties.service.instance.operationalMode.initialMode }}


# KAFKA
spring.kafka.bootstrap-servers={{ .Values.systemProperties.kafka.bootstrapServers }}
spring.kafka.properties.schema.registry.url={{ .Values.systemProperties.kafka.schemaregistryUrl }}
spring.kafka.security.protocol={{ .Values.systemProperties.kafka.securityProtocol }}
spring.kafka.consumer.group-id={{ .Values.systemProperties.kafka.groupId }}
spring.kafka.ssl.key-store-location =file:{{ .Values.systemProperties.kafka.ssl.keystoreLocation }}
spring.kafka.ssl.trust-store-location = file:{{ .Values.systemProperties.kafka.ssl.truststoreLocation }}
spring.kafka.properties.schema.registry.ssl.keystore.location = {{ .Values.systemProperties.kafka.schemaRegistrySsl.keystoreLocation }}
spring.kafka.properties.schema.registry.ssl.truststore.location = {{ .Values.systemProperties.kafka.schemaRegistrySsl.truststoreLocation }}
spring.kafka.properties.auto.register.schemas={{ .Values.systemProperties.auto.register.schemas }}
spring.kafka.producer.config.retries_config={{ .Values.systemProperties.kafka.producer.config.retries_config }}
spring.kafka.producer.config.batch_size_config={{ .Values.systemProperties.kafka.producer.config.batch_size_config }}
spring.kafka.producer.config.linger_ms_config={{ .Values.systemProperties.kafka.producer.config.linger_ms_config }}